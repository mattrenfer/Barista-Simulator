{"version":3,"sources":["webpack:///./node_modules/vue-use-sound/dist/esm/howler-878e393d.js"],"names":["commonjsGlobal","globalThis","window","global","self","createCommonjsModule","fn","module","exports","howler","HowlerGlobal","this","init","prototype","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","test","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","indexOf","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","_endFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","checkIE","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","howler$1","freeze","assign"],"mappings":"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","file":"js/chunk-2d2250d1.d3f1416f.js","sourcesContent":["/*!\n  * vue-use-sound v1.1.1\n  * (c) 2021 Yaël GUILLOUX\n  * @license MIT\n  */\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn) {\n  var module = { exports: {} };\n\treturn fn(module, module.exports), module.exports;\n}\n\n/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\nvar howler = createCommonjsModule(function (module, exports) {\n(function() {\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for CommonJS libraries such as browserify.\n  {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof commonjsGlobal !== 'undefined') {\n    commonjsGlobal.HowlerGlobal = HowlerGlobal;\n    commonjsGlobal.Howler = Howler;\n    commonjsGlobal.Howl = Howl;\n    commonjsGlobal.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n});\n\nvar howler$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), howler, {\n\t'default': howler\n}));\n\nexport { howler$1 as h };\n"],"sourceRoot":""}